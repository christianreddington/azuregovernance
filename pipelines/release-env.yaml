name: azure.governance.envrelease$(Rev:.r)

trigger: none

pr: none

variables:
  - name: TF_INPUT
    value: "false"
  - name: TF_IN_AUTOMATION
    value: "true"
  - name: TF_VERSION
    value: 0.12.19

stages:
  - stage: publishArtifacts

    jobs:
      - job: publishTerraform
        displayName: Publish Azure Governance Terraform files/plans.

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - publish: src/terraform
            displayName: "Release Azure Governance."
            artifact: releaseAzureGovernance
            enabled: "true"

      - job: terraformInstall
        displayName: Terraform (Install)

        pool:
          vmImage: "ubuntu-latest"

        steps:
          - template: /pipelines/templates/tf-install.yaml
            parameters:
              tfVersion: $(TF_VERSION)

      - job: publishDevPlan
        displayName: Publish dev plan
        variables:
          - group: azuregovernancedev
          - group: azuregovernancedevsecret
        pool:
          vmImage: "ubuntu-latest"
        dependsOn: terraformInstall
        steps:
          - template: /pipelines/templates/tf-init-plan.yaml
            parameters:
              tfCliInit: -backend=true -backend-config=dev.stage
              tfCliPlan: -out dev.plan -var-file=dev.tfvars.json

          - publish: src/terraform/dev.plan
            displayName: "Publish Dev Plan"
            artifact: releaseAzureGovernancedevplan
            enabled: "true"

      - job: publishProdPlan
        displayName: Publish prod plan
        variables:
          - group: azuregovernanceprod
          - group: azuregovernanceprodsecret
        pool:
          vmImage: "ubuntu-latest"
        dependsOn: terraformInstall
        steps:
          - template: /pipelines/templates/tf-init-plan.yaml
            parameters:
              tfCliInit: -backend=true -backend-config=prod.stage
              tfCliPlan: -out prod.plan  -var-file=prod.tfvars.json

          - publish: src/terraform/prod.plan
            displayName: "Publish Prod Plan"
            artifact: releaseAzureGovernanceprodplan
            enabled: "true"

  - stage: dev

    variables:
      - group: azuregovernancedev
      - group: azuregovernancedevsecret

    jobs:
      - deployment: TerraformApplyPlan
        displayName: Terraform (Apply Plan)
        pool:
          vmImage: "ubuntu-latest"
        #dependsOn: string
        #condition: string
        continueOnError: false # 'true' if future jobs should run even if this job fails; defaults to 'false'
        #timeoutInMinutes: nonEmptyString        # how long to run the job before automatically cancelling
        #cancelTimeoutInMinutes: nonEmptyString  # how much time to give 'run always even if cancelled tasks' before killing them
        #variables: { string: string } | [ variable | variableReference ]
        environment: dev
        strategy:
          runOnce:
            preDeploy:
              steps:
                - bash: |
                    ls -laR ../

                - bash: |
                    ls -laR $(Pipeline.Workspace)

                - bash: |
                    ls -laR $(Build.SourcesDirectory)

                - bash: |
                    ls -laR $(Build.BinariesDirectory)

                - bash: |
                    ls -laR $(Build.ArtifactStagingDirectory)

                - bash: |
                    ls -laR $(Common.TestResultsDirectory)
                - bash: |
                    ls -laR $(System.DefaultWorkingDirectory)
                - bash: |
                    ls -laR $(Agent.BuildDirectory)
                #- template: /pipelines/templates/tf-install.yaml
                #  parameters:
                #    tfVersion: $(TF_VERSION)
            deploy:
              steps:
                - template: /pipelines/templates/tf-init-applyplan.yaml
                  parameters:
                    tfCliInit: -backend=true -backend-config=dev.stage
                    tfCliApply: -var-file=dev.tfvars.json dev.plan
